// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace vMotion.Api.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.CollectionAttribute("SpecFlowNonParallelizableFeatures")]
    [Xunit.TraitAttribute("Category", "CI")]
    [Xunit.TraitAttribute("Category", "web")]
    [Xunit.TraitAttribute("Category", "mongoDb")]
    [Xunit.TraitAttribute("Category", "nonparallel")]
    public partial class MemberNotificationsFeature : object, Xunit.IClassFixture<MemberNotificationsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "CI",
                "web",
                "mongoDb",
                "nonparallel"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "MemberNotifications.feature"
#line hidden
        
        public MemberNotificationsFeature(MemberNotificationsFeature.FixtureData fixtureData, vMotion_Api_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "MemberNotifications", "    As a registered member\r\n    I would like to manage my notifications", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
  testRunner.Given("a user with role [Customer] using a mobile client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customer wants to get all his notifications")]
        [Xunit.TraitAttribute("FeatureTitle", "MemberNotifications")]
        [Xunit.TraitAttribute("Description", "Customer wants to get all his notifications")]
        public void CustomerWantsToGetAllHisNotifications()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer wants to get all his notifications", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description",
                            "NotificationType",
                            "IsRead",
                            "IsArchived"});
                table32.AddRow(new string[] {
                            "00",
                            "alert",
                            "false",
                            "false"});
                table32.AddRow(new string[] {
                            "01",
                            "alert",
                            "false",
                            "true"});
                table32.AddRow(new string[] {
                            "02",
                            "alert",
                            "false",
                            "false"});
#line 11
  testRunner.Given("with these notifications in database", ((string)(null)), table32, "Given ");
#line hidden
#line 16
   testRunner.When("a GET request is sent to [/client-api/members/me/notifications]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
   testRunner.Then("the response status should be Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
    testRunner.And("a list should have 2 item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customer wants to get all his UNREAD notifications")]
        [Xunit.TraitAttribute("FeatureTitle", "MemberNotifications")]
        [Xunit.TraitAttribute("Description", "Customer wants to get all his UNREAD notifications")]
        public void CustomerWantsToGetAllHisUNREADNotifications()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer wants to get all his UNREAD notifications", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description",
                            "NotificationType",
                            "IsRead"});
                table33.AddRow(new string[] {
                            "00",
                            "alert",
                            "false"});
                table33.AddRow(new string[] {
                            "01",
                            "alert",
                            "true"});
                table33.AddRow(new string[] {
                            "02",
                            "alert",
                            "false"});
#line 21
  testRunner.Given("with these notifications in database", ((string)(null)), table33, "Given ");
#line hidden
#line 26
   testRunner.When("a GET request is sent to [/client-api/members/me/notifications?isRead=false]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
   testRunner.Then("the response status should be Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
    testRunner.And("a list should have 2 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customer wants to get all his READ notifications")]
        [Xunit.TraitAttribute("FeatureTitle", "MemberNotifications")]
        [Xunit.TraitAttribute("Description", "Customer wants to get all his READ notifications")]
        public void CustomerWantsToGetAllHisREADNotifications()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer wants to get all his READ notifications", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description",
                            "NotificationType",
                            "IsRead"});
                table34.AddRow(new string[] {
                            "00",
                            "alert",
                            "false"});
                table34.AddRow(new string[] {
                            "01",
                            "alert",
                            "true"});
#line 31
  testRunner.Given("with these notifications in database", ((string)(null)), table34, "Given ");
#line hidden
#line 35
   testRunner.When("a GET request is sent to [/client-api/members/me/notifications?isRead=true]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
   testRunner.Then("the response status should be Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
    testRunner.And("a list should have 1 item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customer wants to get all his ARCHIVED notifications")]
        [Xunit.TraitAttribute("FeatureTitle", "MemberNotifications")]
        [Xunit.TraitAttribute("Description", "Customer wants to get all his ARCHIVED notifications")]
        public void CustomerWantsToGetAllHisARCHIVEDNotifications()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer wants to get all his ARCHIVED notifications", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description",
                            "NotificationType",
                            "IsRead",
                            "IsArchived"});
                table35.AddRow(new string[] {
                            "00",
                            "alert",
                            "false",
                            "false"});
                table35.AddRow(new string[] {
                            "01",
                            "alert",
                            "false",
                            "true"});
                table35.AddRow(new string[] {
                            "02",
                            "alert",
                            "false",
                            "false"});
#line 40
  testRunner.Given("with these notifications in database", ((string)(null)), table35, "Given ");
#line hidden
#line 45
   testRunner.When("a GET request is sent to [/client-api/members/me/notifications?isArchived=true]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
   testRunner.Then("the response status should be Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
    testRunner.And("a list should have 1 item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customer wants to get all his RESERVATION notifications")]
        [Xunit.TraitAttribute("FeatureTitle", "MemberNotifications")]
        [Xunit.TraitAttribute("Description", "Customer wants to get all his RESERVATION notifications")]
        public void CustomerWantsToGetAllHisRESERVATIONNotifications()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer wants to get all his RESERVATION notifications", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description",
                            "NotificationType",
                            "IsRead"});
                table36.AddRow(new string[] {
                            "00",
                            "alert",
                            "false"});
                table36.AddRow(new string[] {
                            "01",
                            "reservation",
                            "false"});
#line 50
  testRunner.Given("with these notifications in database", ((string)(null)), table36, "Given ");
#line hidden
#line 54
   testRunner.When("a GET request is sent to [/client-api/members/me/notifications?type=reservation]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
   testRunner.Then("the response status should be Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
    testRunner.And("a list should have 1 item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customer wants to get all his RESERVATION and UNREAD notifications")]
        [Xunit.TraitAttribute("FeatureTitle", "MemberNotifications")]
        [Xunit.TraitAttribute("Description", "Customer wants to get all his RESERVATION and UNREAD notifications")]
        public void CustomerWantsToGetAllHisRESERVATIONAndUNREADNotifications()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer wants to get all his RESERVATION and UNREAD notifications", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description",
                            "NotificationType",
                            "IsRead"});
                table37.AddRow(new string[] {
                            "00",
                            "alert",
                            "false"});
                table37.AddRow(new string[] {
                            "01",
                            "reservation",
                            "false"});
                table37.AddRow(new string[] {
                            "02",
                            "reservation",
                            "true"});
                table37.AddRow(new string[] {
                            "03",
                            "reservation",
                            "true"});
#line 59
  testRunner.Given("with these notifications in database", ((string)(null)), table37, "Given ");
#line hidden
#line 65
   testRunner.When("a GET request is sent to [/client-api/members/me/notifications?type=reservation&i" +
                        "sRead=false]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
   testRunner.Then("the response status should be Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 67
    testRunner.And("a list should have 1 item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customer wants to add a notification")]
        [Xunit.TraitAttribute("FeatureTitle", "MemberNotifications")]
        [Xunit.TraitAttribute("Description", "Customer wants to add a notification")]
        public void CustomerWantsToAddANotification()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer wants to add a notification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "notificationType",
                            "operatorId",
                            "caseId",
                            "description",
                            "data"});
                table38.AddRow(new string[] {
                            "alert",
                            "00E0A000-0000-0000-0001-000000000011",
                            "CA110000-0000-0000-0001-000000000001",
                            "some data",
                            "extra"});
#line 70
  testRunner.Given("a payload request", ((string)(null)), table38, "Given ");
#line hidden
#line 73
   testRunner.When("a POST request is sent to [/client-api/members/me/notifications]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 74
   testRunner.Then("the response status should be Created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
    testRunner.And("member-notification record was updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customer wants to get one notification")]
        [Xunit.TraitAttribute("FeatureTitle", "MemberNotifications")]
        [Xunit.TraitAttribute("Description", "Customer wants to get one notification")]
        public void CustomerWantsToGetOneNotification()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer wants to get one notification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 78
  testRunner.Given("a notification record exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 79
   testRunner.When("a GET request is sent to [/client-api/members/me/notifications/{notificationId}]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
   testRunner.Then("the response should be successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Customer wants to mark one notification")]
        [Xunit.TraitAttribute("FeatureTitle", "MemberNotifications")]
        [Xunit.TraitAttribute("Description", "Customer wants to mark one notification")]
        [Xunit.InlineDataAttribute("read", "true", new string[0])]
        [Xunit.InlineDataAttribute("unread", "false", new string[0])]
        public void CustomerWantsToMarkOneNotification(string readStatus, string expected, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("readStatus", readStatus);
            argumentsOfScenario.Add("expected", expected);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer wants to mark one notification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 83
  testRunner.Given("a notification record exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 84
   testRunner.When(string.Format("a PUT request is sent to [/client-api/members/me/notifications/{{notificationId}}" +
                            "/{0}]", readStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 85
   testRunner.Then("the response should be successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
    testRunner.And(string.Format("member-notification record was marked [{0}]", expected), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customer wants to update a notification")]
        [Xunit.TraitAttribute("FeatureTitle", "MemberNotifications")]
        [Xunit.TraitAttribute("Description", "Customer wants to update a notification")]
        public void CustomerWantsToUpdateANotification()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer wants to update a notification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 94
  testRunner.Given("a notification record exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "notificationType",
                            "description"});
                table39.AddRow(new string[] {
                            "alert",
                            "some data"});
#line 95
  testRunner.Given("a payload request", ((string)(null)), table39, "Given ");
#line hidden
#line 98
   testRunner.When("a PUT request is sent to [/client-api/members/me/notifications/{notificationId}]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
   testRunner.Then("the response status should be Accepted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customer wants to delete a notification")]
        [Xunit.TraitAttribute("FeatureTitle", "MemberNotifications")]
        [Xunit.TraitAttribute("Description", "Customer wants to delete a notification")]
        public void CustomerWantsToDeleteANotification()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer wants to delete a notification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 102
  testRunner.Given("a notification record exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 103
   testRunner.When("a DELETE request is sent to [/client-api/members/me/notifications/{notificationId" +
                        "}]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 104
   testRunner.Then("the response status should be Accepted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 105
    testRunner.And("member-notification record was marked as archived", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MemberNotificationsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MemberNotificationsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
